---
title: "Interactive Analysis with Shiny"
format: 
  html: 
    embed-resources: true
    inline-styles: |
      #app {
          width: 100%;
          overflow-y: visible; /* Adjust if necessary */
      }
      .container {
          width: 100%;
          padding: 0;
          margin: 0;
      }
      body, html {
          height: auto;
          overflow-y: auto; /* Ensures scroll on the page if content is larger than the viewport */
          margin: 0;
          padding: 0;
      }
runtime: shiny
self-contained: true
---


```{r logo, echo=FALSE, out.width="100px"}
htmltools::img(src = knitr::image_uri(file.path("logo.png")),
               alt = 'logo',
               style = 'position:absolute; top:0; right:0; padding:10px;',
               width='400px')
```

```{r setup, echo=FALSE,include=FALSE}
# Load required libraries
library(shiny)
library(shinyjs)
library(plotly)
library(dplyr)
library(readr)
library(gt)
library(tidyverse)
library(knitr)
library(kableExtra)
# Function to calculate AUC using the trapezoidal rule
trapezoidal_auc <- function(time, value) {
  n <- length(time)
  time = as.numeric(time)
  auc <- 0
  for (i in 1:(n-1)) {
    auc <- auc + (time[i+1] - time[i]) * (value[i+1] + value[i]) / 2
  }
  return(abs(auc))
}
# Function to convert "hr" strings to minutes
convert_to_minutes <- function(time_str) {
  hours <- as.numeric(sub("hr", "", time_str))
  return(hours * 60)
}
```

```{r UI, echo=FALSE,include=FALSE}
# Define choices for UI
choice_measure = c( "Glucose", "C-peptide")
choice_TRT = c("Pooled", "Individual")
choice_plotvariable = c("Visit", "Time")
choice_summary = c("mean", "sd", "median", "min", "max", "IQR")
ui <- fluidPage(
  # Custom CSS to further reduce space between rows
  tags$head(
    tags$style(HTML("
      .row {
        margin-bottom: 5px; /* Further reduce space between rows */
      }
      .form-group {
        margin-bottom: 5px; /* Reduce space around form groups (e.g., radio buttons, checkboxes) */
      }
    "))
  ),
  
  # App Title ---------------------------------------------------------------
  titlePanel("Summary statistics and AUC calculation for Trial 111 and 112 data"),
  
  # Top row with 3 radio buttons
  fluidRow(
    column(4, 
           radioButtons("Treatment", "Visualization:",
                        choices = c("Pooled", "Individual"), 
                        selected = "Pooled")
    ),
    column(4, 
           radioButtons("Measurement", "Measurement:",
                        choices = choice_measure,
                        selected = "C-peptide")
    ),
    column(4, 
           radioButtons("plotvariable", "Variable for X-axis",
                        choices = c("Visit", "Time"),
                        selected = "Visit")
    )
  ),
  
  # Second row with 3 columns and conditional visibility
  fluidRow(
    column(4,
           conditionalPanel(condition = "input.Treatment != 'Individual'",
                            checkboxInput("Summary", "Summary", value = FALSE)),
           conditionalPanel(condition = "input.Summary == true && input.Treatment != 'Individual'",
                            selectInput("SummaryType", "Summary Type",
                                        choices = c("mean", "sd", "median", "min", "max", "IQR"),
                                        selected = "mean"))
    ),
    column(4,
           checkboxInput("showAUC", "AUC", value = FALSE),
           conditionalPanel(condition = "input.showAUC == true && input.Treatment != 'Individual'",
                            selectInput("AUC_SummaryType", "AUC Summary Type",
                                        choices = c("mean", "sd", "median", "min", "max", "IQR"),
                                        selected = "mean"))
    ),
    column(4,
           conditionalPanel(
             condition = "input.Treatment == 'Pooled'",
             checkboxInput("CI", "Confidence Interval", value = FALSE)
           ),
           conditionalPanel(
             condition = "input.Treatment == 'Pooled' && input.CI == true",
             sliderInput("CI_level", "Confidence Interval Level",
                         min = 0.5, max = 1.0, value = 0.95, step = 0.01)
           ),
           conditionalPanel(
             condition = "input.Treatment == 'Individual'",
             uiOutput("individualSelect")
           )
    )
  ),
  
  # Third row with Run button
  fluidRow(
    column(12, 
           actionButton("runBtn", "Run", 
                        style = "color: #fff; background-color: #007bff; border-color: #007bff; padding: 10px 24px; font-size: 16px; display: block; margin: 0 auto;"))
  ),
  
  # Main panel to show results in a horizontal split layout
  fluidRow(
    column(6,
           h3("Raw Data"),
           plotlyOutput("InteractionPlot_raw"),
           gt_output("Summary_raw"),
           conditionalPanel(condition = "input.showAUC == true",
                            plotlyOutput("AUCPlot_raw"),
                            gt_output("AUCSummary_raw"))
    ),
    column(6,
           h3("Imputed Data"),
           plotlyOutput("InteractionPlot_imputed"),
           gt_output("Summary_imputed"),
           conditionalPanel(condition = "input.showAUC == true",
                            plotlyOutput("AUCPlot_imputed"),
                             gt_output("AUCSummary_imputed"))
    )
  )
)

```

```{r Server, echo=FALSE,include=FALSE}
server <- function(input, output, session) {
  library(kableExtra)
  library(dplyr)
  library(plotly)
  library(gt)
  
  # Load datasets
  data_cpep <- read.csv("data/data_cpep.csv")
  data_gluc <- read.csv("data/data_gluc.csv")
  data_cpep_mice <- read.csv("data/data_cpep_mice.csv")
  data_gluc_mice <- read.csv("data/data_gluc_mice.csv")
  
  # Reactive function to select data based on measurement
  data <- reactive({
    if (input$Measurement == "Glucose") {
      list(raw = data_gluc, imputed = data_gluc_mice)
    } else if (input$Measurement == "C-peptide") {
      list(raw = data_cpep, imputed = data_cpep_mice)
    } else {
      list(raw = NULL, imputed = NULL)
    }
  })
  
  # UI for selecting individual IDs
  output$individualSelect <- renderUI({
    selectInput("selectedID", "Select ID:",
                choices = unique(data()$raw$ID),
                selected = unique(data()$raw$ID)[1])
  })
  
  # Interaction Plot for Raw Data (Left Column) using plotly
  output$InteractionPlot_raw <- renderPlotly({
    req(input$runBtn)
    plot_data <- data()$raw
    if (input$Treatment == "Pooled") {
      plot_data <- plot_data %>%
        group_by(Visit, Time) %>%
        summarise(Measurement = round(match.fun(input$SummaryType)(Measurement, na.rm = TRUE), 3)) %>%
        ungroup()
    } else if (input$Treatment == "Individual") {
      plot_data <- plot_data %>% filter(ID == input$selectedID)
    }
    plot <- switch(input$plotvariable,
                   "Visit" = {
                     plot_ly(plot_data, x = ~Time, y = ~Measurement, color = ~as.factor(Visit), type = 'scatter', mode = 'lines+markers')
                   },
                   "Time" = {
                     plot_ly(plot_data, x = ~Visit, y = ~Measurement, color = ~as.factor(Time), type = 'scatter', mode = 'lines+markers')
                   })
    plot
  })
  
  # Interaction Plot for Imputed Data (Right Column) using plotly
  output$InteractionPlot_imputed <- renderPlotly({
    req(input$runBtn)
    plot_data <- data()$imputed
    if (input$Treatment == "Pooled") {
      plot_data <- plot_data %>%
        group_by(Visit, Time) %>%
        summarise(Measurement = round(match.fun(input$SummaryType)(Measurement), 3)) %>%
        ungroup()
    } else if (input$Treatment == "Individual") {
      plot_data <- plot_data %>% filter(ID == input$selectedID)
    }
    plot <- switch(input$plotvariable,
                   "Visit" = {
                     plot_ly(plot_data, x = ~Time, y = ~Measurement, color = ~as.factor(Visit), type = 'scatter', mode = 'lines+markers')
                   },
                   "Time" = {
                     plot_ly(plot_data, x = ~Visit, y = ~Measurement, color = ~as.factor(Time), type = 'scatter', mode = 'lines+markers')
                   })
    plot
  })
  
  # Summary statistics for Raw Data (Left Column) using gt
  output$Summary_raw <- render_gt({
    req(input$runBtn)
    
    summary_data <- data()$raw %>%
      group_by(Visit, Time) %>%
      summarise(Measurement = round(match.fun(input$SummaryType)(Measurement, na.rm = TRUE), 3))
    
    summary_table <- if (input$plotvariable == "Visit") {
      summary_data %>%
        select(-Time) %>%
        pivot_wider(names_from = Visit, values_from = Measurement)
    } else {
      summary_data %>%
        select(-Visit) %>%
        pivot_wider(names_from = Time, values_from = Measurement)
    }
    
    summary_table %>%
      gt() %>%
      tab_header(
        title = paste("Summary statistics for Raw Data:", input$SummaryType)
      )
  })
  
  # Summary statistics for Imputed Data (Right Column) using gt
  output$Summary_imputed <- render_gt({
    req(input$runBtn)
    
    summary_data <- data()$imputed %>%
      group_by(Visit, Time) %>%
      summarise(Measurement = round(match.fun(input$SummaryType)(Measurement), 3))
    
    summary_table <- if (input$plotvariable == "Visit") {
      summary_data %>%
        select(-Time) %>%
        pivot_wider(names_from = Visit, values_from = Measurement)
    } else {
      summary_data %>%
        select(-Visit) %>%
        pivot_wider(names_from = Time, values_from = Measurement)
    }
    
    summary_table %>%
      gt() %>%
      tab_header(
        title = paste("Summary of Imputed Data:", input$SummaryType)
      )
  })
  
 # AUC Plot for raw data (Left Column) using plotly with conditional CI
  output$AUCPlot_raw <- renderPlotly({  
    data <- data()$raw
    data$Time <- sapply(data$Time, convert_to_minutes)
    auc_trapezoidal <- data %>%
      filter(!is.na(Measurement)) %>%
      group_by(ID, Visit) %>%
      summarise(auc = trapezoidal_auc(as.numeric(Time), Measurement)) %>%
      ungroup()

    if (input$Treatment == "Pooled") {
      summary_data <- auc_trapezoidal %>%
        group_by(Visit) %>%
        summarise(
          auc_mean = mean(auc),
          auc_sd = sd(auc),
          auc_lower = auc_mean - qt(1 - (1 - input$CI_level) / 2, df = n() - 1) * auc_sd / sqrt(n()),
          auc_upper = auc_mean + qt(1 - (1 - input$CI_level) / 2, df = n() - 1) * auc_sd / sqrt(n())
        )
      
      plot <- plot_ly(summary_data, x = ~Visit, y = ~auc_mean, name = 'AUC Mean', type = 'scatter', mode = 'lines+markers') %>%
        layout(title = paste("AUC Summary with", input$CI_level * 100, "% CI"),
               xaxis = list(title = "Visit"),
               yaxis = list(title = "AUC"),
               showlegend = FALSE)

      if (input$CI) {
        plot <- plot %>%
          add_ribbons(ymin = ~auc_lower, ymax = ~auc_upper, name = 'CI',
                      line = list(color = 'rgba(7, 164, 181, 0.05)'),
                      fillcolor = 'rgba(7, 164, 181, 0.2)')
      }
      
    } else if (input$Treatment == "Individual") {
      auc_ID <- auc_trapezoidal %>% filter(ID == input$selectedID)
      plot <- plot_ly(auc_ID, x = ~Visit, y = ~auc, type = 'scatter', mode = 'lines+markers',
                      name = 'AUC') %>%
        layout(title = paste("AUC for subject ID:", input$selectedID),
               xaxis = list(title = "Visit"),
               yaxis = list(title = "AUC"),
               showlegend = FALSE)
    }
    plot
  })

  # AUC plot for Imputed data (Right Column) using plotly with conditional CI
  output$AUCPlot_imputed <- renderPlotly({  
    data <- data()$imputed
    data$Time <- sapply(data$Time, convert_to_minutes)
    auc_trapezoidal <- data %>%
      group_by(ID, Visit) %>%
      summarise(auc = trapezoidal_auc(as.numeric(Time), Measurement)) %>%
      ungroup()

    if (input$Treatment == "Pooled") {
      summary_data <- auc_trapezoidal %>%
        group_by(Visit) %>%
        summarise(
          auc_mean = mean(auc),
          auc_sd = sd(auc),
          auc_lower = auc_mean - qt(1 - (1 - input$CI_level) / 2, df = n() - 1) * auc_sd / sqrt(n()),
          auc_upper = auc_mean + qt(1 - (1 - input$CI_level) / 2, df = n() - 1) * auc_sd / sqrt(n())
        )
      
      plot <- plot_ly(summary_data, x = ~Visit, y = ~auc_mean, name = 'AUC Mean', type = 'scatter', mode = 'lines+markers') %>%
        layout(title = paste("AUC Summary with", input$CI_level * 100, "% CI"),
               xaxis = list(title = "Visit"),
               yaxis = list(title = "AUC"),
               showlegend = FALSE)

      if (input$CI) {
        plot <- plot %>%
          add_ribbons(ymin = ~auc_lower, ymax = ~auc_upper, name = 'CI',
                      line = list(color = 'rgba(7, 164, 181, 0.05)'),
                      fillcolor = 'rgba(7, 164, 181, 0.2)')
      }
      
    } else if (input$Treatment == "Individual") {
      auc_ID <- auc_trapezoidal %>% filter(ID == input$selectedID)
      plot <- plot_ly(auc_ID, x = ~Visit, y = ~auc, type = 'scatter', mode = 'lines+markers',
                      name = 'AUC') %>%
        layout(title = paste("AUC for subject ID:", input$selectedID),
               xaxis = list(title = "Visit"),
               yaxis = list(title = "AUC"),
               showlegend = FALSE)
    }
    plot
  })
  
  # AUC Summary for raw data (Left Column) using gt
  output$AUCSummary_raw <- render_gt({
    data <- data()$raw
    data$Time <- sapply(data$Time, convert_to_minutes)
    auc_trapezoidal <- data %>%
      group_by(ID, Visit) %>%
      summarise(auc = trapezoidal_auc(as.numeric(Time), Measurement)) %>%
      ungroup()

    summary_data <- if (input$Treatment == "Pooled") {
      auc_trapezoidal %>%
        group_by(Visit) %>%
        summarise(auc_summary = match.fun(input$AUC_SummaryType)(auc, na.rm = TRUE))
    } else {
      auc_trapezoidal %>%
        filter(ID == input$selectedID) %>%
        group_by(Visit) %>%
        summarise(auc_summary = auc)
    }

    summary_data %>%
      gt() %>%
      tab_header(title = paste("Summary:", input$AUC_SummaryType, "for AUC"))
  })

  # AUC Summary for imputed data (Right Column) using gt
  output$AUCSummary_imputed <- render_gt({
    data <- data()$imputed
    data$Time <- sapply(data$Time, convert_to_minutes)
    auc_trapezoidal <- data %>%
      group_by(ID, Visit) %>%
      summarise(auc = trapezoidal_auc(as.numeric(Time), Measurement)) %>%
      ungroup()

    summary_data <- if (input$Treatment == "Pooled") {
      auc_trapezoidal %>%
        group_by(Visit) %>%
        summarise(auc_summary = match.fun(input$AUC_SummaryType)(auc, na.rm = TRUE))
    } else {
      auc_trapezoidal %>%
        filter(ID == input$selectedID) %>%
        group_by(Visit) %>%
        summarise(auc_summary = auc)
    }

    summary_data %>%
      gt() %>%
      tab_header(title = paste("Summary:", input$AUC_SummaryType, "for AUC"))
  })
}


```

```{r Run app , echo=FALSE,eval=TRUE }
# Run the Shiny App
shinyApp(ui = ui, server = server)
```
