---
title: "Interactive Analysis with Shiny"
format: 
  html: 
       embed-resources: true
runtime: shiny
self-contained: true
---

```{r logo, echo=FALSE, out.width="100px"}
htmltools::img(src = knitr::image_uri(file.path("logo.png")),
               alt = 'logo',
               style = 'position:absolute; top:0; right:0; padding:10px;',
               width='400px')
```


```{r setup, echo=FALSE,include=FALSE}
# Load required libraries
library(shiny)
library(shinyjs)
library(plotly)
library(dplyr)
library(readr)
library(gt)
library(tidyverse)
library(knitr)
library(kableExtra)
# Function to calculate AUC using the trapezoidal rule
trapezoidal_auc <- function(time, value) {
  n <- length(time)
  time = as.numeric(time)
  auc <- 0
  for (i in 1:(n-1)) {
    auc <- auc + (time[i+1] - time[i]) * (value[i+1] + value[i]) / 2
  }
  return(abs(auc))
}
```


```{r UI, echo=FALSE,include=FALSE}
# Define choices for UI
choice_measure = c( "Glucose", "C-peptide")
choice_TRT = c("Pooled", "Individual")
choice_plotvariable = c("Visit", "Time")
choice_summary = c("mean", "sd", "median", "min", "max", "IQR")
ui <- fluidPage(
  # App Title ---------------------------------------------------------------
  titlePanel("Summary statistics and AUC calculation for Trial 111 and 112 data"),
  
  # Top horizontal layout with input controls
  fluidRow(
    column(2,
           radioButtons("Measurement", "Select measurement type:",
                        choices = choice_measure,
                        selected = "C-peptide")
    ),
    column(2,
           radioButtons("Treatment", "Select visualization type:",
                        choices = c("Pooled", "Individual"), 
                        selected = "Individual")
    ),
    column(2,
           conditionalPanel(condition = "input.Treatment != 'Individual'",
                            checkboxInput("Summary", "Summary (default: Mean)", value = FALSE)),
           conditionalPanel(condition = "input.Summary == false && input.Treatment != 'Individual'",
                            checkboxInput("CI", "Confidence Interval", value = FALSE)),
           conditionalPanel(condition = "input.CI == true && input.Summary == false && input.Treatment != 'Individual'",
                            sliderInput("CI_level", "Confidence Interval Level",
                                        min = 0.5, max = 1.0, value = 0.95, step = 0.01))
    ),
    column(2,
           radioButtons("plotvariable", "Select variable for X-axis",
                        choices = c("Visit", "Time"),
                        selected = "Visit"),
           conditionalPanel(condition = "input.Treatment == 'Individual'",
                            uiOutput("individualSelect"))
    ),
    column(2,
           conditionalPanel(condition = "input.Summary == true",
                            selectInput("SummaryType", "Select Summary Type",
                                        choices = c("mean", "sd", "median", "min", "max", "IQR"),
                                        selected = "mean")),
           checkboxInput("showAUC", "Area Under Curve (AUC)", value = FALSE),
           conditionalPanel(condition = "input.showAUC == true && input.Treatment != 'Individual'",
                            selectInput("AUC_SummaryType", "Select AUC Summary Type",
                                        choices = c("mean", "sd", "median", "min", "max", "IQR"),
                                        selected = "mean"))
    ),
    column(2,
           checkboxInput("hideplot", "Hide Plot", value = FALSE),
           actionButton("runBtn", "Run")
    )
  ),
  
  # Main panel to show results in a horizontal split layout
  fluidRow(
    column(6,
           h3("Raw Data"),
           plotlyOutput("InteractionPlot"),
           gt_output("Summary")
    ),
    column(6,
           h3("Imputed Data"),
           plotlyOutput("AUCPlot"),
           gt_output("AUCSummary")
    )
  )
)
```

```{r Server, echo=FALSE,include=FALSE}
server <- function(input, output, session) {
  library(kableExtra)
  library(dplyr)
  library(plotly)
  
  data_cpep <- read.csv("data/data_cpep.csv")
  data_gluc <- read.csv("data/data_gluc.csv")
  data_cpep_mice <- read.csv("data/data_cpep_mice.csv")
  data_gluc_mice <- read.csv("data/data_gluc_mice.csv")
  
  data <- reactive({
    if (input$Measurement == "Glucose") {
      list(raw = data_gluc, imputed = data_gluc_mice)
    } else if (input$Measurement == "C-peptide") {
      list(raw = data_cpep, imputed = data_cpep_mice)
    } else {
      list(raw = NULL, imputed = NULL)
    }
  })
  
  output$individualSelect <- renderUI({
    selectInput("selectedID", "Select ID:",
                choices = unique(data()$raw$ID),
                selected = unique(data()$raw$ID)[1])
  })
  
  # Interaction Plot for Raw Data (Left Column) --------------------------------------
  output$InteractionPlot <- renderPlotly({
    req(input$runBtn)
    
    plot_data <- data()$raw
    
    if (input$Treatment == "Pooled") {
      plot_data <- plot_data %>%
        group_by(Visit, Time) %>%
        summarise(Measurement = round(match.fun(input$SummaryType)(Measurement, na.rm = TRUE), 3)) %>%
        ungroup()
    } else if (input$Treatment == "Individual") {
      plot_data <- plot_data %>% filter(ID == input$selectedID)
    }
    
    plot <- switch(input$plotvariable,
                   "Visit" = {
                     plot_ly(plot_data, x = ~Time, y = ~Measurement, color = ~as.factor(Visit), type = 'scatter', mode = 'lines+markers')
                   },
                   "Time" = {
                     plot_ly(plot_data, x = ~Visit, y = ~Measurement, color = ~as.factor(Time), type = 'scatter', mode = 'lines+markers')
                   })
    
    if (input$Treatment == "Individual" && any(is.na(plot_data$Measurement))) {
      na_data <- plot_data %>%
        filter(is.na(Measurement)) %>%
        mutate(Measurement = 0)
      
      plot <- plot %>%
        add_markers(data = na_data, x = ~Time, y = ~Measurement, color = ~as.factor(Visit), symbol = I('asterisk'), size = I(10))
    }
    
    if (input$SummaryType == "mean" && input$CI && input$Treatment == "Pooled") {
      ci_data <- plot_data %>%
        group_by(get(input$plotvariable)) %>%
        summarise(mean = mean(Measurement, na.rm = TRUE), 
                  se = sd(Measurement, na.rm = TRUE) / sqrt(n())) %>%
        mutate(ci_upper = round(mean + qnorm(1 - (1 - input$CI_level) / 2) * se, 3),
               ci_lower = round(mean - qnorm(1 - (1 - input$CI_level) / 2) * se, 3))
      
      plot <- plot %>%
        add_ribbons(data = ci_data, x = ~get(input$plotvariable), ymin = ~ci_lower, ymax = ~ci_upper, color = I('gray80'), name = 'CI') %>%
        add_trace(data = ci_data, x = ~get(input$plotvariable), y = ~mean, mode = 'markers+lines', line = list(color = 'red'), name = 'Mean with CI')
    }
    
    plot
  })
  
  # Interaction Plot for Imputed Data (Right Column) ------------------------------
  output$AUCPlot <- renderPlotly({
    req(input$runBtn)
    
    plot_data <- data()$imputed
    
    if (input$Treatment == "Pooled") {
      plot_data <- plot_data %>%
        group_by(Visit, Time) %>%
        summarise(Measurement = round(match.fun(input$SummaryType)(Measurement), 3)) %>%
        ungroup()
    } else if (input$Treatment == "Individual") {
      plot_data <- plot_data %>% filter(ID == input$selectedID)
    }
    
    plot <- if(!input$CI){
      switch(input$plotvariable,
                   "Visit" = {
                     plot_ly(plot_data, x = ~Time, y = ~Measurement, color = ~as.factor(Visit), type = 'scatter', mode = 'lines+markers')
                   },
                   "Time" = {
                     plot_ly(plot_data, x = ~Visit, y = ~Measurement, color = ~as.factor(Time), type = 'scatter', mode = 'lines+markers')
                   })
    }else{
      switch(input$plotvariable,
                   "Visit" = {
        ci_data <- plot_data %>%
        group_by(Visit) %>%
        summarise(mean = mean(Measurement), 
                  se = sd(Measurement) / sqrt(n())) %>%
        mutate(ci_upper = round(mean + qnorm(1 - (1 - input$CI_level) / 2) * se, 3),
               ci_lower = round(mean - qnorm(1 - (1 - input$CI_level) / 2) * se, 3))
      plot <- plot_ly(plot_data, x = ~Time, y = ~Measurement, color = ~as.factor(Visit), type = 'scatter', mode = 'lines+markers') %>%
        add_ribbons(data = ci_data, x = ~Visit, ymin = ~ci_lower, ymax = ~ci_upper, color = I('gray80'), name = 'CI') %>%
        add_trace(data = ci_data, x = ~Visit, y = ~mean, mode = 'markers+lines', line = list(color = 'red'), name = 'Mean with CI')
                   },
                   "Time" = {
                       ci_data <- plot_data %>%
        group_by(Time) %>%
        summarise(mean = mean(Measurement), 
                  se = sd(Measurement) / sqrt(n())) %>%
        mutate(ci_upper = round(mean + qnorm(1 - (1 - input$CI_level) / 2) * se, 3),
               ci_lower = round(mean - qnorm(1 - (1 - input$CI_level) / 2) * se, 3))
      plot <- plot_ly(plot_data, x = ~Time, y = ~Measurement, color = ~as.factor(Time), type = 'scatter', mode = 'lines+markers') %>%
        add_ribbons(data = ci_data, x = ~Time, ymin = ~ci_lower, ymax = ~ci_upper, color = I('gray80'), name = 'CI') %>%
        add_trace(data = ci_data, x = ~Time, y = ~mean, mode = 'markers+lines', line = list(color = 'red'), name = 'Mean with CI')
                   })
      
    }
    })
  
  # Summary statistics for Raw Data (Left Column) ------------------------------------
  output$Summary <- renderText({
    req(input$runBtn)
    
    if (input$Treatment == "Pooled") {
      summary_data <- data()$raw %>%
        group_by(Visit, Time) %>%
        summarise(Measurement = round(match.fun(input$SummaryType)(Measurement, na.rm = TRUE), 3))
      
      summary_table <- if (input$plotvariable == "Visit") {
        summary_data %>%
          select(-Time) %>%
          pivot_wider(names_from = Visit, values_from = Measurement)
      } else {
        summary_data %>%
          select(-Visit) %>%
          pivot_wider(names_from = Time, values_from = Measurement)
      }
      
      summary_table <- summary_table %>%
        kable("html", table.attr = "class='table table-striped'", caption = paste("Summary statistics for Raw Data:", input$SummaryType)) %>%
        kable_styling(full_width = F, bootstrap_options = c("striped", "hover", "condensed")) %>%
        as.character()
      
      summary_table
    }
  })
  
  # Summary statistics for Imputed Data (Right Column) ------------------------------
  output$AUCSummary <- renderText({
    req(input$runBtn)
    
    if (input$Treatment == "Pooled") {
      summary_data <- data()$imputed %>%
        group_by(Visit, Time) %>%
        summarise(Measurement = round(match.fun(input$SummaryType)(Measurement), 3))
      
      summary_table <- if (input$plotvariable == "Visit") {
        summary_data %>%
          select(-Time) %>%
          pivot_wider(names_from = Visit, values_from = Measurement)
      } else {
        summary_data %>%
          select(-Visit) %>%
          pivot_wider(names_from = Time, values_from = Measurement)
      }
      
      summary_table <- summary_table %>%
        kable("html", table.attr = "class='table table-striped'", caption = paste("Summary statistics for Imputed Data:", input$SummaryType)) %>%
        kable_styling(full_width = F, bootstrap_options = c("striped", "hover", "condensed")) %>%
        as.character()
      
      summary_table
    }
  })
}

```


```{r Run app , echo=FALSE,eval=TRUE }
# Run the Shiny App
shinyApp(ui = ui, server = server)
```
